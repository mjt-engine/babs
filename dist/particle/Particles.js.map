{"version":3,"file":"Particles.js","sourceRoot":"","sources":["../../src/particle/Particles.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,mBAAmB,EAAE,MAAM,+CAA+C,CAAC;AAEpF,OAAO,EAAE,SAAS,EAAE,MAAM,oBAAoB,CAAC;AAI/C,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAG/B,KAAY,EACZ,IAAY,EACZ,QAAiB,EACjB,EAAE;IACF,MAAM,QAAQ,GAAG,KAAK,CAAC,QAAQ,IAAI,EAAE,CAAC;IACtC,MAAM,QAAQ,GAAG,QAAQ,CAAC,sBAAsB,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;IAE1D,IAAI,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC;QACxB,QAAQ,CAAC;IACX,CAAC;IAED,OAAO,QAAQ,EAAE,CAAC;AACpB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,sBAAsB,GAAG,CACpC,KAAY,EACZ,IAAY,EACZ,UAAsB,EAAE,EACH,EAAE;IACvB,OAAO,iBAAiB,CAAC,KAAK,EAAE,IAAI,EAAE,GAAG,EAAE;QACzC,MAAM,EAAE,gBAAgB,GAAG,KAAK,EAAE,GAAG,OAAO,CAAC;QAC7C,MAAM,GAAG,GAAG,IAAI,mBAAmB,CAAC,IAAI,EAAE,KAAK,EAAE;YAC/C,gBAAgB;SACjB,CAAC,CAAC;QAEH,MAAM,QAAQ,GAAG,KAAK,CAAC,QAAQ,IAAI,EAAE,CAAC;QACtC,KAAK,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAC1B,MAAM,MAAM,GAAG,QAAQ,CAAC,sBAAsB,CAAC,IAAI,EAAE,CAAC;QACtD,QAAQ,CAAC,sBAAsB,CAAC,GAAG,MAAM,CAAC;QAC1C,MAAM,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC;QACnB,OAAO,GAAG,CAAC;IACb,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,SAAS,GAAG,EAAE,sBAAsB,EAAE,CAAC","sourcesContent":["import type { IParticleSystem } from \"@babylonjs/core/Particles/IParticleSystem\";\nimport { SolidParticleSystem } from \"@babylonjs/core/Particles/solidParticleSystem\";\nimport type { Scene } from \"@babylonjs/core/scene\";\nimport { isDefined } from \"@mjt-engine/object\";\n\nexport type SpsOptions = Partial<{ useModelMaterial: boolean }>;\n\nexport const getParticleSystem = <\n  T extends IParticleSystem | SolidParticleSystem\n>(\n  scene: Scene,\n  name: string,\n  producer: () => T\n) => {\n  const metadata = scene.metadata ?? {};\n  const spsMaybe = metadata[\"solidParticleSystems\"]?.[name];\n\n  if (isDefined(spsMaybe)) {\n    spsMaybe;\n  }\n\n  return producer();\n};\n\nexport const getSolidParticleSystem = (\n  scene: Scene,\n  name: string,\n  options: SpsOptions = {}\n): SolidParticleSystem => {\n  return getParticleSystem(scene, name, () => {\n    const { useModelMaterial = false } = options;\n    const sps = new SolidParticleSystem(name, scene, {\n      useModelMaterial,\n    });\n\n    const metadata = scene.metadata ?? {};\n    scene.metadata = metadata;\n    const spsMap = metadata[\"solidParticleSystems\"] ?? {};\n    metadata[\"solidParticleSystems\"] = spsMap;\n    spsMap[name] = sps;\n    return sps;\n  });\n};\n\nexport const Particles = { getSolidParticleSystem };\n"]}