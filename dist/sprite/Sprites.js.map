{"version":3,"file":"Sprites.js","sourceRoot":"","sources":["../../src/sprite/Sprites.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,gCAAgC,CAAC;AACxD,OAAO,EAAE,aAAa,EAAE,MAAM,uCAAuC,CAAC;AAEtE,OAAO,EAAE,WAAW,EAAE,MAAM,qCAAqC,CAAC;AAClE,OAAO,EAAE,SAAS,EAAE,MAAM,oBAAoB,CAAC;AAQ/C,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAC9B,KAAY,EACZ,IAAY,EACZ,UAAgC,EAAE,EAClC,EAAE;IACF,MAAM,YAAY,GAAG,KAAK,EAAE,cAAc,EAAE,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC;IAC3E,IAAI,SAAS,CAAC,YAAY,CAAC,EAAE,CAAC;QAC5B,OAAO,YAAY,CAAC;IACtB,CAAC;IACD,MAAM,EAAE,QAAQ,GAAG,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG,OAAO,CAAC;IACnD,IAAI,CAAC,MAAM,EAAE,CAAC;QACZ,MAAM,IAAI,KAAK,CAAC,oBAAoB,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;IAC5D,CAAC;IACD,OAAO,IAAI,aAAa,CAAC,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;AACpE,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,SAAS,GAAG,CACvB,KAAY,EACZ,IAAY,EACZ,iBAAyB,EACjB,EAAE;IACV,MAAM,aAAa,GAAG,WAAW,CAAC,gBAAgB,CAAC,KAAK,EAAE,iBAAiB,CAAC,CAAC,CAAC;IAC9E,MAAM,WAAW,GAAG,aAAa,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC;IACzE,IAAI,SAAS,CAAC,WAAW,CAAC,EAAE,CAAC;QAC3B,OAAO,WAAW,CAAC;IACrB,CAAC;IACD,OAAO,IAAI,MAAM,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;AACzC,CAAC,CAAC;AACF,MAAM,CAAC,MAAM,OAAO,GAAG,EAAE,gBAAgB,EAAE,SAAS,EAAE,CAAC","sourcesContent":["import { Sprite } from \"@babylonjs/core/Sprites/sprite\";\nimport { SpriteManager } from \"@babylonjs/core/Sprites/spriteManager\";\nimport type { Scene } from \"@babylonjs/core/scene\";\nimport { assertValue } from \"@mjt-engine/assert/dist/assertValue\";\nimport { isDefined } from \"@mjt-engine/object\";\n\nexport type SpriteManagerOptions = Partial<{\n  capacity: number;\n  cellSize: { width: number; height: number } | number;\n  imgUrl: string;\n}>;\n\nexport const getSpriteManager = (\n  scene: Scene,\n  name: string,\n  options: SpriteManagerOptions = {}\n) => {\n  const managerMaybe = scene?.spriteManagers?.find((sm) => sm.name === name);\n  if (isDefined(managerMaybe)) {\n    return managerMaybe;\n  }\n  const { capacity = 1, cellSize, imgUrl } = options;\n  if (!imgUrl) {\n    throw new Error(\"imgUrl is required\", { cause: options });\n  }\n  return new SpriteManager(name, imgUrl, capacity, cellSize, scene);\n};\n\nexport const getSprite = (\n  scene: Scene,\n  name: string,\n  spriteManagerName: string\n): Sprite => {\n  const spriteManager = assertValue(getSpriteManager(scene, spriteManagerName));\n  const spriteMaybe = spriteManager?.sprites?.find((s) => s.name === name);\n  if (isDefined(spriteMaybe)) {\n    return spriteMaybe;\n  }\n  return new Sprite(name, spriteManager);\n};\nexport const Sprites = { getSpriteManager, getSprite };\n"]}