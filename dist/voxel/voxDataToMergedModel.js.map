{"version":3,"file":"voxDataToMergedModel.js","sourceRoot":"","sources":["../../src/voxel/voxDataToMergedModel.ts"],"names":[],"mappings":"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","sourcesContent":["import { Mesh } from \"@babylonjs/core/Meshes/mesh\";\nimport { Tags } from \"@babylonjs/core/Misc/tags\";\nimport type { Scene } from \"@babylonjs/core/scene\";\nimport { Colors } from \"@mjt-engine/color\";\nimport type { VoxData } from \"@mjt-engine/magica-voxels\";\nimport { toVec3 } from \"@mjt-engine/math\";\nimport { Arrays, isDefined } from \"@mjt-engine/object\";\nimport { getMaterial } from \"../material/getMaterial\";\nimport { getBox } from \"../mesh/getBox\";\nimport { mergeMeshes } from \"../mesh/mergeMeshes\";\nimport { toOrderedString } from \"../util/toOrderedString\";\nimport { groupMeshesByMaterial } from \"./groupMeshesByMaterial\";\n\nexport const voxDataToMergedModel = (\n  scene: Scene,\n  voxData: VoxData,\n  name: string\n) => {\n  const { XYZI, RGBA } = voxData;\n\n  const colors = RGBA.map((rgba) => {\n    const { r, g, b, a } = rgba;\n    return Colors.builder({ color: [r, g, b, a], model: \"rgba\" }).toString();\n  });\n  // console.log(`${name} voxels: ${XYZI.length} colors: ${colors.length}`);\n  // const parent = new Mesh(name, scene);\n  // const centeringNode = new Mesh(`centering-${name}`);\n  const voxels = XYZI.map((xyzi, index) => {\n    const color = colors[xyzi.i];\n\n    const [x, y, z] = toVec3(xyzi);\n    const mesh = getBox(\n      scene,\n      `voxel-merged-${color}-${toOrderedString(xyzi)}`,\n      {\n        position: [x, y, z],\n        // color,\n        // material: `voxel-merged-material-${color}`,\n        material: \"voxel-material\",\n        colors: Arrays.from(6).map(() => color),\n      }\n    );\n    mesh.setEnabled(false);\n    return mesh;\n  });\n  const grouped = groupMeshesByMaterial(voxels);\n  const subMerged = Object.values(grouped).map((group) => mergeMeshes(group));\n\n  const merged = new Mesh(`merged-${name}`, scene);\n  subMerged.filter(isDefined).forEach((m) => (m.parent = merged));\n\n  const material = getMaterial(scene, \"voxel-material\", \"standard\");\n\n  subMerged.filter(isDefined).forEach((m) => (m.material = material));\n\n  // voxels.forEach((v) => v.setParent(merged));\n  merged.metadata = {\n    voxels: voxels,\n  };\n\n  // const merged = mergeMeshes(meshes, {\n  //   // multiMultiMaterials: true,\n  //   disposeSource: true,\n  // });\n  // merged.name = name;\n  // merged.refreshBoundingInfo();\n  // const center = merged.getBoundingInfo().boundingBox.center;\n  // merged.dispose();\n  // centeringNode.position = centeringNode.position.subtract(center);\n  // centeringNode.parent = parent;\n  // return parent;\n  Tags.AddTagsTo(merged, \"merged\");\n  // const model = new TransformNode(name);\n  const model = new Mesh(name, scene);\n  model.metadata = {\n    voxels: voxels,\n  };\n  merged.parent = model;\n\n  // merged.refreshBoundingInfo();\n  // const mergedCenter = merged.getBoundingInfo().boundingSphere.center;\n  // merged.position = v3(0,0,-30);\n  return model;\n};\n"]}