{"version":3,"file":"voxDataToSps.js","sourceRoot":"","sources":["../../src/voxel/voxDataToSps.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,oCAAoC,CAAC;AACjE,OAAO,EAAE,mBAAmB,EAAE,MAAM,+CAA+C,CAAC;AAEpF,OAAO,EAAE,MAAM,EAAE,MAAM,mBAAmB,CAAC;AAE3C,OAAO,EAAE,EAAE,EAAE,MAAM,WAAW,CAAC;AAC/B,OAAO,EAAE,EAAE,EAAE,MAAM,WAAW,CAAC;AAC/B,OAAO,EAAE,EAAE,EAAE,MAAM,WAAW,CAAC;AAC/B,OAAO,EAAE,WAAW,EAAE,MAAM,yBAAyB,CAAC;AACtD,OAAO,EAAE,wBAAwB,EAAE,MAAM,4BAA4B,CAAC;AAEtE,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,KAAY,EAAE,OAAgB,EAAE,IAAY,EAAE,EAAE;IAC3E,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC;IAErC,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;QAC/B,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,IAAI,CAAC;QAC5B,OAAO,MAAM,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC;IAC3E,CAAC,CAAC,CAAC;IAEH,MAAM,GAAG,GAAG,IAAI,mBAAmB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IACjD,MAAM,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;IACzB,MAAM,GAAG,GAAG,WAAW,CAAC,SAAS,CAAC,UAAU,EAAE;QAC5C,KAAK,EAAE,KAAK;QACZ,MAAM,EAAE,KAAK;QACb,KAAK,EAAE,KAAK;KACb,CAAC,CAAC;IACH,GAAG,CAAC,QAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IAC/B,GAAG,CAAC,SAAS,EAAE,CAAC;IAChB,GAAG,CAAC,OAAO,EAAE,CAAC;IACd,wBAAwB,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,KAAK,EAAE,EAAE;QACtD,MAAM,CAAC,KAAK,EAAE,UAAU,CAAC,GAAG,EAAE,CAAC;QAC/B,MAAM,QAAQ,GAAG,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QACtC,QAAQ,CAAC,QAAQ,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC;QAE9B,MAAM,KAAK,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC;QACjC,QAAQ,CAAC,KAAK,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;IACH,MAAM,QAAQ,GAAG,WAAW,CAAC,KAAK,EAAE,cAAc,EAAE,UAAU,CAAC,CAAC;IAChE,sEAAsE;IACtE,YAAY;IACZ,QAAQ,CAAC,aAAa,GAAG,EAAE,CAAC,OAAO,CAAC,CAAC;IACrC,GAAG,CAAC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAE7B,GAAG,CAAC,YAAY,EAAE,CAAC;IACnB,OAAO,GAAG,CAAC;AACb,CAAC,CAAC","sourcesContent":["import { MeshBuilder } from \"@babylonjs/core/Meshes/meshBuilder\";\nimport { SolidParticleSystem } from \"@babylonjs/core/Particles/solidParticleSystem\";\nimport type { Scene } from \"@babylonjs/core/scene\";\nimport { Colors } from \"@mjt-engine/color\";\nimport type { VoxData } from \"@mjt-engine/magica-voxels\";\nimport { c3 } from \"../bab/c3\";\nimport { c4 } from \"../bab/c4\";\nimport { v3 } from \"../bab/v3\";\nimport { getMaterial } from \"../material/getMaterial\";\nimport { voxDataToCorrectedPoints } from \"./voxDataToCorrectedPoints\";\n\nexport const voxDataToSps = (scene: Scene, voxData: VoxData, name: string) => {\n  const { XYZI, RGBA, SIZE } = voxData;\n\n  const colors = RGBA.map((rgba) => {\n    const { r, g, b, a } = rgba;\n    return Colors.builder({ color: [r, g, b, a], model: \"rgba\" }).toString();\n  });\n\n  const sps = new SolidParticleSystem(name, scene);\n  const scale = 1 / SIZE.z;\n  const box = MeshBuilder.CreateBox(\"temp-box\", {\n    width: scale,\n    height: scale,\n    depth: scale,\n  });\n  sps.addShape(box, XYZI.length);\n  sps.buildMesh();\n  box.dispose();\n  voxDataToCorrectedPoints(voxData).forEach((pc, index) => {\n    const [point, colorIndex] = pc;\n    const particle = sps.particles[index];\n    particle.position = v3(point);\n\n    const color = colors[colorIndex];\n    particle.color = c4(color);\n  });\n  const material = getMaterial(scene, \"vox-material\", \"standard\");\n  // const material = Visuals.getMaterial(scene, \"vox-material\", \"pbr\");\n  // material.\n  material.specularColor = c3(\"black\");\n  sps.mesh.material = material;\n\n  sps.setParticles();\n  return sps;\n};\n"]}