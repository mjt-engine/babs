{"version":3,"file":"animateExplosion.js","sourceRoot":"","sources":["../../src/voxel/animateExplosion.ts"],"names":[],"mappings":"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","sourcesContent":["import { Curve3 } from \"@babylonjs/core/Maths/math.path\";\nimport type { Vector3 } from \"@babylonjs/core/Maths/math.vector\";\nimport type { SolidParticle } from \"@babylonjs/core/Particles/solidParticle\";\nimport { Maths, toVec3 } from \"@mjt-engine/math\";\nimport { isDefined } from \"@mjt-engine/object\";\nimport { Randoms, type NextRandom } from \"@mjt-engine/random\";\nimport { v3 } from \"../bab/v3\";\n\nexport const animateExplosion = (\n  particle: SolidParticle,\n\n  options: Partial<{\n    random: NextRandom;\n    radius: number;\n    maxBounce: number;\n    groundZ: number;\n    speed: number;\n    decay: number;\n    dispose: () => void;\n  }> = {}\n) => {\n  const {\n    random = Randoms.globalRandom,\n    radius = 1,\n    maxBounce = 0,\n    groundZ = 0,\n    speed = 20,\n    decay = 0.01,\n    dispose = () => (particle.isVisible = false),\n  } = options;\n\n  // const random = Noises.noiseStream(seed);\n  // use path\n  {\n    const path = particle.props?.[\"path\"] as Vector3[];\n    if (isDefined(path) && path.length > 0) {\n      const next = path.pop();\n      if (!next) {\n        throw new Error(\"No next value from path\", { cause: path });\n      }\n      // console.log(`next: ${next.x} ${next.y} ${next.z}`);\n      particle.position = next;\n      return;\n    }\n  }\n\n  // setup path\n  {\n    const { bounces = maxBounce } = particle.props ?? {};\n    if (bounces <= 0) {\n      if (random() < decay) {\n        dispose();\n      }\n      return;\n    }\n    const bounceEnergy = bounces / maxBounce;\n    const start = particle.position;\n    const [x, y, z] = toVec3(start);\n\n    const rg = (x: number) => {\n      return (random() * radius * 2 - radius) * (bounceEnergy / 4) + x;\n    };\n\n    // ground position\n    const [gx, gy] = [rg(x), rg(y)];\n\n    const end = v3([gx, gy, groundZ]);\n\n    const [mx, my, mz] = toVec3(Maths.midPoint3(start, end));\n    const mid1 = v3(mx, my, z - random() * bounceEnergy * 3);\n    // const mid2 = v3(x, y, mz - random() * bounceEnergy * 3);\n\n    const catRom = Curve3.CreateCatmullRomSpline([start, mid1, end], speed);\n    const path = catRom.getPoints().reverse();\n\n    // const rotationAxis = v3([0, 1, 0]);\n    // const rotationAmount = 2 * random() - 1;\n    // mesh.rotate(v3(rotationAxis), rotationAmount);\n    // console.log(`mb ${maxBounce}, bounces: ${bounces} ${Date.now()}`);\n    const pathMetadata = {\n      path,\n      bounces: bounces - 1,\n      // rotationAxis: [2 * random() - 1, 2 * random() - 1, 2 * random() - 1],\n    };\n    const metadata = particle.props ?? {};\n    particle.props = { ...metadata, ...pathMetadata };\n  }\n};\n"]}