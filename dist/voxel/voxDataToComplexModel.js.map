{"version":3,"file":"voxDataToComplexModel.js","sourceRoot":"","sources":["../../src/voxel/voxDataToComplexModel.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,6BAA6B,CAAC;AACnD,OAAO,EAAE,IAAI,EAAE,MAAM,2BAA2B,CAAC;AAEjD,OAAO,EAAE,MAAM,EAAE,MAAM,mBAAmB,CAAC;AAE3C,OAAO,EAAE,EAAE,EAAE,MAAM,WAAW,CAAC;AAC/B,OAAO,EAAE,cAAc,EAAE,MAAM,wBAAwB,CAAC;AAExD,MAAM,CAAC,MAAM,qBAAqB,GAAG,CACnC,KAAY,EACZ,OAAgB,EAChB,IAAY,EACZ,EAAE;IACF,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC;IAE/B,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;QAC/B,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,IAAI,CAAC;QAC5B,OAAO,MAAM,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC;IAC3E,CAAC,CAAC,CAAC;IACH,MAAM,MAAM,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IACrC,uDAAuD;IACvD,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;QACtC,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC7B,MAAM,IAAI,GAAG,cAAc,CAAC,KAAK,EAAE,SAAS,KAAK,EAAE,EAAE;YACnD,KAAK;YACL,QAAQ,EAAE,kBAAkB,KAAK,EAAE;SACpC,CAAC,CAAC;QACH,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC;QACzB,+BAA+B;QAC/B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QAErB,OAAO,IAAI,CAAC;IACd,CAAC,CAAC,CAAC;IACH,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;IAClC,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC","sourcesContent":["import { Mesh } from \"@babylonjs/core/Meshes/mesh\";\nimport { Tags } from \"@babylonjs/core/Misc/tags\";\nimport type { Scene } from \"@babylonjs/core/scene\";\nimport { Colors } from \"@mjt-engine/color\";\nimport type { VoxData } from \"@mjt-engine/magica-voxels\";\nimport { v3 } from \"../bab/v3\";\nimport { getBoxInstance } from \"../mesh/getBoxInstance\";\n\nexport const voxDataToComplexModel = (\n  scene: Scene,\n  voxData: VoxData,\n  name: string\n) => {\n  const { XYZI, RGBA } = voxData;\n\n  const colors = RGBA.map((rgba) => {\n    const { r, g, b, a } = rgba;\n    return Colors.builder({ color: [r, g, b, a], model: \"rgba\" }).toString();\n  });\n  const parent = new Mesh(name, scene);\n  // const centeringNode = new Mesh(`centering-${name}`);\n  const meshes = XYZI.map((xyzi, index) => {\n    const color = colors[xyzi.i];\n    const mesh = getBoxInstance(scene, `voxel-${color}`, {\n      color,\n      material: `voxel-material-${color}`,\n    });\n    mesh.position = v3(xyzi);\n    // mesh.parent = centeringNode;\n    mesh.parent = parent;\n\n    return mesh;\n  });\n  Tags.AddTagsTo(parent, \"complex\");\n  return parent;\n};\n"]}