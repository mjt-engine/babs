{"version":3,"file":"getMaterial.js","sourceRoot":"","sources":["../../src/material/getMaterial.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,oBAAoB,CAAC;AAE/C,OAAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAGlD,OAAO,EAAE,gBAAgB,EAAE,MAAM,4CAA4C,CAAC;AAC9E,OAAO,EAAE,WAAW,EAAE,MAAM,2CAA2C,CAAC;AAIxE,MAAM,CAAC,MAAM,WAAW,GAAG,CACzB,KAAY,EACZ,IAAY,EACZ,UAAkC,UAAU,EACxB,EAAE;IACtB,MAAM,QAAQ,GAAG,KAAK,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;IAC/C,IAAI,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC;QACxB,4CAA4C;QAC5C,OAAO,QAA8B,CAAC;IACxC,CAAC;IAED,MAAM,IAAI,GACR,OAAO,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,EAAE,IAAI,IAAI,UAAU,CAAC;IAEtE,QAAQ,IAAI,EAAE,CAAC;QACb,KAAK,UAAU,CAAC,CAAC,CAAC;YAChB,MAAM,QAAQ,GAAG,IAAI,gBAAgB,CAAC,IAAI,EAAE,KAAK,CAAuB,CAAC;YACzE,cAAc,CAAC,KAAK,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;YACzC,OAAO,QAAQ,CAAC;QAClB,CAAC;QACD,KAAK,KAAK,CAAC,CAAC,CAAC;YACX,MAAM,QAAQ,GAAG,IAAI,WAAW,CAAC,IAAI,EAAE,KAAK,CAAuB,CAAC;YACpE,cAAc,CAAC,KAAK,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;YACzC,OAAO,QAAQ,CAAC;QAClB,CAAC;QACD,OAAO,CAAC,CAAC,CAAC;YACR,MAAM,IAAI,KAAK,CAAC,2BAA2B,IAAI,GAAG,CAAC,CAAC;QACtD,CAAC;IACH,CAAC;AACH,CAAC,CAAC","sourcesContent":["import { isDefined } from \"@mjt-engine/object\";\nimport type { MaterialTypeMap } from \"./MaterialTypeMap\";\nimport { updateMaterial } from \"./updateMaterial\";\nimport type { AllMaterialOptions } from \"./Materials\";\nimport type { Scene } from \"@babylonjs/core/scene\";\nimport { StandardMaterial } from \"@babylonjs/core/Materials/standardMaterial\";\nimport { PBRMaterial } from \"@babylonjs/core/Materials/PBR/pbrMaterial\";\n\ntype VisualMaterialType = keyof MaterialTypeMap;\n\nexport const getMaterial = <T extends VisualMaterialType = VisualMaterialType>(\n  scene: Scene,\n  name: string,\n  options: T | AllMaterialOptions = \"standard\"\n): MaterialTypeMap[T] => {\n  const material = scene.getMaterialByName(name);\n  if (isDefined(material)) {\n    // updateMaterial(scene, material, options);\n    return material as MaterialTypeMap[T];\n  }\n\n  const type =\n    typeof options === \"string\" ? options : options?.type ?? \"standard\";\n\n  switch (type) {\n    case \"standard\": {\n      const material = new StandardMaterial(name, scene) as MaterialTypeMap[T];\n      updateMaterial(scene, material, options);\n      return material;\n    }\n    case \"pbr\": {\n      const material = new PBRMaterial(name, scene) as MaterialTypeMap[T];\n      updateMaterial(scene, material, options);\n      return material;\n    }\n    default: {\n      throw new Error(`Unknown material type: '${type}'`);\n    }\n  }\n};\n"]}