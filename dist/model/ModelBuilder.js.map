{"version":3,"file":"ModelBuilder.js","sourceRoot":"","sources":["../../src/model/ModelBuilder.ts"],"names":[],"mappings":"","sourcesContent":["import type { BoundingBox } from \"@babylonjs/core/Culling/boundingBox\";\nimport type { PBRMaterial } from \"@babylonjs/core/Materials/PBR/pbrMaterial\";\nimport type { Texture } from \"@babylonjs/core/Materials/Textures/texture\";\nimport type { Color3, Color4 } from \"@babylonjs/core/Maths/math.color\";\nimport type { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\nimport type { Mesh } from \"@babylonjs/core/Meshes/mesh\";\nimport type { Nullable } from \"@babylonjs/core/types\";\n\nexport type ModelPath = string | File | string[] | File[];\n\nexport type ModelBuilder = {\n  lock: (id?: string) => Promise<string>;\n  unlock: (id: string) => ModelBuilder;\n  camera: (x: number, y: number, z: number) => ModelBuilder;\n  lookAt: (x: number, y: number, z: number) => ModelBuilder;\n  takeCanvas: (width?: number, height?: number) => Promise<HTMLCanvasElement>;\n  attachControls: () => ModelBuilder;\n  startRenderLoop: () => ModelBuilder;\n  reset: () => ModelBuilder;\n  describe: (what?: string, search?: RegExp) => ModelBuilder;\n  updateColor: (color: string, texture?: RegExp, mesh?: RegExp) => ModelBuilder;\n  updateTranslucency: (\n    value: number,\n    texture?: RegExp,\n    mesh?: RegExp\n  ) => ModelBuilder;\n  gotoFrame: (frame: number) => Promise<void>;\n  morph: (influences: Record<string, number>) => ModelBuilder;\n  fix: (mapper: ModelMeshMapper) => ModelBuilder;\n  fixMesh: (mesh: ModelMesh, mapper: ModelMeshMapper) => ModelBuilder;\n  fixMaterial: (mesh: ModelMesh, mapper: ModelMaterialMapper) => ModelBuilder;\n  fixTexture: (\n    material: ModelMaterial,\n    mapper: ModelTextureMapper\n  ) => ModelBuilder;\n  color3: (value: string) => Color3;\n  color4: (value: string) => Color4;\n  // append: ({path: string|File | string[] | File[]}) => ModelBuilder;\n  append: (path: ModelPath, name?: string) => Promise<ModelBuilder>;\n  createTexture: (\n    image: HTMLCanvasElement | HTMLImageElement\n  ) => Promise<ModelTexture>;\n  getMorphs: (search?: RegExp) => string[];\n  addMorphRemaps: (remaps: MorphRemaps) => ModelBuilder;\n  getModelNames: () => string[];\n  setClearColor: (color: string) => ModelBuilder;\n  setRotation: (model: string, radians: number) => ModelBuilder;\n  getBBox: (model: string) => BoundingBox;\n  wireframe: () => ModelBuilder;\n  pickMesh: (\n    x: number,\n    y: number,\n    predicate?: (mesh: ModelMesh) => boolean\n  ) => Nullable<ModelMesh> | undefined;\n  highlight: (mesh: ModelMesh, color: string) => ModelBuilder;\n  unHighlight: (mesh?: ModelMesh) => ModelBuilder;\n  addTestCube: () => ModelBuilder;\n  render: () => ModelBuilder;\n};\n\nexport type MorphRemaps = Record<string, string[]>;\n\nexport type ModelMesh = AbstractMesh;\nexport type ModelConcreteMesh = Mesh;\nexport type ModelNode = Node;\nexport type ModelMaterial = PBRMaterial;\nexport type ModelTexture = Texture;\nexport type ModelColor3 = Color3;\nexport type ModelColor4 = Color4;\nexport type ModelBoundingBox = BoundingBox;\n\nexport type ModelMeshMapper = (mesh: ModelMesh) => ModelMesh;\nexport type ModelMaterialMapper = (material: ModelMaterial) => ModelMaterial;\nexport type ModelTextureMapper = (texture: ModelTexture) => ModelTexture;\n"]}