{"version":3,"file":"loadDazFigure.js","sourceRoot":"","sources":["../../src/model/loadDazFigure.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,qCAAqC,CAAC;AAGlE,OAAO,EAAE,KAAK,EAAE,MAAM,yBAAyB,CAAC;AAChD,OAAO,EAAE,YAAY,EAAE,MAAM,oBAAoB,CAAC;AAElD,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,KAI7B,EAAyB,EAAE;IAC1B,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,GAAG,IAAI,YAAY,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,GAAG,KAAK,CAAC;IAC9E,MAAM,MAAM,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;IACjC,MAAM,CAAC,aAAa,EAAE,CAAC;IAEvB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACrC,IAAI,CAAC;YACH,KAAK,CAAC,UAAU,CAAC,CAAC,yBAAyB;YAC3C,WAAW,CAAC,iBAAiB,GAAG,KAAK,CAAC;YAEtC,WAAW,CAAC,MAAM,CAChB,EAAE,EACF,IAAI,EACJ,KAAK,EACL,CAAC,WAAW,EAAE,EAAE;gBACd,MAAM,QAAQ,GAAG,WAAW,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gBACvD,IAAI,CAAC,QAAQ,EAAE,CAAC;oBACd,MAAM,IAAI,KAAK,CAAC,oBAAoB,EAAE,EAAE,KAAK,EAAE,WAAW,EAAE,CAAC,CAAC;gBAChE,CAAC;gBACD,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC;gBACrB,IAAI,WAAW,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;oBACnC,WAAW,CAAC,YAAY,GAAG,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBACpD,CAAC;gBACD,WAAW,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;oBAC3C,IAAI,CAAC,IAAI,EAAE,CAAC;gBACd,CAAC,CAAC,CAAC;gBACH,YAAY,CAAC,WAAW,CAAC,CAAC;gBAE1B,OAAO,CAAC,QAAQ,CAAC,CAAC;YACpB,CAAC,EACD,CAAC,QAAQ,EAAE,EAAE,GAAE,CAAC,EAChB,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE;gBACzB,OAAO,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC,CAAC;gBAC9C,MAAM,CAAC,MAAM,CAAC,CAAC;YACjB,CAAC,CACF,CAAC;QACJ,CAAC;QAAC,OAAO,MAAM,EAAE,CAAC;YAChB,MAAM,CAAC,MAAM,CAAC,CAAC;QACjB,CAAC;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC","sourcesContent":["import { SceneLoader } from \"@babylonjs/core/Loading/sceneLoader\";\nimport type { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\nimport type { Scene } from \"@babylonjs/core/scene\";\nimport { GLTF2 } from \"@babylonjs/loaders/glTF\";\nimport { fixDazFigure } from \"./fix/fixDazFigure\";\n\nexport const loadDazFigure = (props: {\n  path: string | File;\n  scene: Scene;\n  name?: string;\n}): Promise<AbstractMesh> => {\n  const { path, scene, name = path instanceof File ? path.name : path } = props;\n  const engine = scene.getEngine();\n  engine.hideLoadingUI();\n\n  return new Promise((resolve, reject) => {\n    try {\n      GLTF2.GLTFLoader; // fucking loader 'magic'\n      SceneLoader.ShowLoadingScreen = false;\n\n      SceneLoader.Append(\n        \"\",\n        path,\n        scene,\n        (loadedScene) => {\n          const rootMesh = loadedScene.getMeshByName(\"__root__\");\n          if (!rootMesh) {\n            throw new Error(\"No root mesh found\", { cause: loadedScene });\n          }\n          rootMesh.name = name;\n          if (loadedScene.cameras.length > 0) {\n            loadedScene.activeCamera = loadedScene.cameras[0];\n          }\n          loadedScene.animationGroups.forEach((anim) => {\n            anim.stop();\n          });\n          fixDazFigure(loadedScene);\n\n          resolve(rootMesh);\n        },\n        (progress) => {},\n        (scene, message, reason) => {\n          console.log({ path, scene, message, reason });\n          reject(reason);\n        }\n      );\n    } catch (reason) {\n      reject(reason);\n    }\n  });\n};\n"]}