{"version":3,"file":"updateColor.js","sourceRoot":"","sources":["../../src/model/updateColor.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,2CAA2C,CAAC;AAExE,OAAO,EAAE,SAAS,EAAE,MAAM,oBAAoB,CAAC;AAC/C,OAAO,EAAE,EAAE,EAAE,MAAM,WAAW,CAAC;AAC/B,MAAM,CAAC,MAAM,IAAI,GAAG;AAClB,YAAY;AACZ,YAAY;AACZ,iCAAiC;AACjC,eAAe;AACf,cAAc;AACd,UAAU;AACV,WAAW;AACX,UAAU;AACV,WAAW;AACX,UAAU;AACV,WAAW;CACZ,CAAC;AAEF,MAAM,CAAC,MAAM,KAAK,GAAG;IACnB,QAAQ;IACR,QAAQ;IACR,QAAQ;IACR,eAAe;IACf,eAAe;IACf,UAAU;IACV,WAAW;IACX,UAAU;IACV,WAAW;IACX,UAAU;IACV,WAAW;CACZ,CAAC;AASF,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,KAAuB,EAAE,EAAE;IACrD,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,cAAc,GAAG,IAAI,EAAE,WAAW,GAAG,IAAI,EAAE,GAAG,KAAK,CAAC;IACzE,MAAM,QAAQ,GAAG,IAAI,EAAE,QAAQ,EAAE,iBAAiB,EAAE,IAAI,EAAE,CAAC;IAC3D,IACE,SAAS,CACP,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE;QAClB,MAAM,OAAO,GAAG,CAAC,EAAE,IAAI,CAAC;QACxB,OAAO,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACtC,CAAC,CAAC,CACH,EACD,CAAC;QACD,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC/B,IAAI,QAAQ,YAAY,WAAW,EAAE,CAAC;YACpC,QAAQ,CAAC,WAAW,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC;YACjC,QAAQ,CAAC,QAAQ,GAAG,CAAC,CAAC;YACtB,QAAQ,CAAC,SAAS,GAAG,GAAG,CAAC;QAC3B,CAAC;aAAM,CAAC;YACN,OAAO,CAAC,GAAG,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC;YAC1B,OAAO,CAAC,IAAI,CACV,wBAAwB,cAAc,yBAAyB,CAChE,CAAC;QACJ,CAAC;IACH,CAAC;IAED,IAAI,CAAC,cAAc,EAAE,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,WAAW,CAAC,EAAE,GAAG,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;AACvE,CAAC,CAAC","sourcesContent":["import { PBRMaterial } from \"@babylonjs/core/Materials/PBR/pbrMaterial\";\nimport type { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\nimport { isDefined } from \"@mjt-engine/object\";\nimport { c3 } from \"../bab/c3\";\nexport const HIDE = [\n  // \"Irises\",\n  // \"Pupils\",\n  // \"Sclera\", // corner of the eye\n  // \"Eyelashes\",\n  // \"EyeSocket\"\n  // \"Face\",\n  // \"Teeth\",\n  // \"Lips\",\n  // \"Mouth\",\n  // \"Ears\",\n  // \"Torso\",\n];\n\nexport const GLOSS = [\n  \"Irises\",\n  \"Pupils\",\n  \"Sclera\",\n  // \"Eyelashes\",\n  // \"EyeSocket\",\n  // \"Face\",\n  // \"Teeth\",\n  // \"Lips\",\n  // \"Mouth\",\n  // \"Ears\",\n  // \"Torso\",\n];\n\nexport type UpdateColorProps = {\n  mesh: AbstractMesh;\n  color: string;\n  textureMatcher: RegExp;\n  meshMatcher: RegExp;\n};\n\nexport const updateColor = (props: UpdateColorProps) => {\n  const { mesh, color, textureMatcher = /.*/, meshMatcher = /.*/ } = props;\n  const textures = mesh?.material?.getActiveTextures() ?? [];\n  if (\n    isDefined(\n      textures.find((t) => {\n        const texName = t?.name;\n        return textureMatcher.test(texName);\n      })\n    )\n  ) {\n    const material = mesh.material;\n    if (material instanceof PBRMaterial) {\n      material.albedoColor = c3(color);\n      material.metallic = 0;\n      material.roughness = 0.8;\n    } else {\n      console.log({ material });\n      console.warn(\n        `SKIPPING RECOLORING: ${textureMatcher} as material is not PBR`\n      );\n    }\n  }\n\n  mesh.getChildMeshes().map((mesh) => updateColor({ ...props, mesh }));\n};\n"]}