{"version":3,"file":"performMorph.js","sourceRoot":"","sources":["../../src/model/performMorph.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,SAAS,EAAE,WAAW,EAAE,MAAM,oBAAoB,CAAC;AAE5D,OAAO,EAAE,kBAAkB,EAAE,MAAM,sBAAsB,CAAC;AAE1D,MAAM,CAAC,MAAM,YAAY,GAAG,CAC1B,KAAY,EACZ,UAAkC,EAClC,MAAmB,EACnB,EAAE;IACF,MAAM,iBAAiB,GAAG,EAAE,GAAG,UAAU,EAAE,CAAC;IAC5C,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;QACvC,MAAM,CAAC,SAAS,EAAE,SAAS,CAAC,GAAG,KAAK,CAAC;QACrC,MAAM,UAAU,GAAG,iBAAiB,CAAC,SAAS,CAAC,CAAC;QAChD,IAAI,WAAW,CAAC,UAAU,CAAC,EAAE,CAAC;YAC5B,OAAO;QACT,CAAC;QACD,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;YAC7B,iBAAiB,CAAC,QAAQ,CAAC,GAAG,UAAU,CAAC;QAC3C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,MAAM,gBAAgB,GAAG,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAC5D,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,WAAW,EAAE,EAAE,KAAK,CAAqB,CACjE,CAAC;IACF,KAAK,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;QAC5C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,UAAU,EAAE,CAAC,EAAE,EAAE,CAAC;YAC5C,MAAM,MAAM,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YACpC,MAAM,KAAK,GAAG,kBAAkB,CAAC,gBAAgB,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;YACjE,IAAI,SAAS,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,SAAS,KAAK,KAAK,EAAE,CAAC;gBACnD,MAAM,CAAC,SAAS,GAAG,KAAK,CAAC;YAC3B,CAAC;QACH,CAAC;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC","sourcesContent":["import type { Scene } from \"@babylonjs/core/scene\";\nimport { isDefined, isUndefined } from \"@mjt-engine/object\";\nimport type { MorphRemaps } from \"./ModelBuilder\";\nimport { findInfluenceValue } from \"./findInfluenceValue\";\n\nexport const performMorph = (\n  scene: Scene,\n  influences: Record<string, number>,\n  remaps: MorphRemaps\n) => {\n  const updatedInfluences = { ...influences };\n  Object.entries(remaps).forEach((remap) => {\n    const [remapName, realNames] = remap;\n    const remapValue = updatedInfluences[remapName];\n    if (isUndefined(remapValue)) {\n      return;\n    }\n    realNames.forEach((realName) => {\n      updatedInfluences[realName] = remapValue;\n    });\n  });\n  const influenceEntries = Object.entries(updatedInfluences).map(\n    ([key, value]) => [key.toLowerCase(), value] as [string, number]\n  );\n  scene.morphTargetManagers.forEach((manager) => {\n    for (let i = 0; i < manager.numTargets; i++) {\n      const target = manager.getTarget(i);\n      const value = findInfluenceValue(influenceEntries, target?.name);\n      if (isDefined(value) && target.influence !== value) {\n        target.influence = value;\n      }\n    }\n  });\n};\n"]}