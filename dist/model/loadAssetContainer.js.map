{"version":3,"file":"loadAssetContainer.js","sourceRoot":"","sources":["../../src/model/loadAssetContainer.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,WAAW,GAEZ,MAAM,qCAAqC,CAAC;AAG7C,OAAO,EAAE,KAAK,EAAE,MAAM,yBAAyB,CAAC;AAEhD,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAChC,KAAY,EACZ,IAAmB,EACnB,UAEK,EAAE,EACkB,EAAE;IAC3B,MAAM,EAAE,UAAU,GAAG,GAAG,EAAE,GAAE,CAAC,EAAE,GAAG,OAAO,CAAC;IAC1C,MAAM,MAAM,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;IACjC,MAAM,CAAC,aAAa,EAAE,CAAC;IAEvB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACrC,IAAI,CAAC;YACH,KAAK,CAAC,UAAU,CAAC,CAAC,yBAAyB;YAC3C,WAAW,CAAC,iBAAiB,GAAG,KAAK,CAAC;YAEtC,WAAW,CAAC,kBAAkB,CAC5B,EAAE,EACF,IAAI,EACJ,KAAK,EACL,CAAC,MAAM,EAAE,EAAE;gBACT,OAAO,CAAC,MAAM,CAAC,CAAC;YAClB,CAAC,EACD,CAAC,QAAQ,EAAE,EAAE;gBACX,OAAO,UAAU,CAAC,QAAQ,CAAC,CAAC;YAC9B,CAAC,EACD,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE;gBACzB,OAAO,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC,CAAC;gBAC9C,MAAM,CAAC,MAAM,CAAC,CAAC;YACjB,CAAC,CACF,CAAC;QACJ,CAAC;QAAC,OAAO,MAAM,EAAE,CAAC;YAChB,MAAM,CAAC,MAAM,CAAC,CAAC;QACjB,CAAC;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC","sourcesContent":["import {\n  SceneLoader,\n  type ISceneLoaderProgressEvent,\n} from \"@babylonjs/core/Loading/sceneLoader\";\nimport type { AssetContainer } from \"@babylonjs/core/assetContainer\";\nimport type { Scene } from \"@babylonjs/core/scene\";\nimport { GLTF2 } from \"@babylonjs/loaders/glTF\";\n\nexport const loadAssetContainer = (\n  scene: Scene,\n  path: string | File,\n  options: Partial<{\n    onProgress: (event: ISceneLoaderProgressEvent) => void;\n  }> = {}\n): Promise<AssetContainer> => {\n  const { onProgress = () => {} } = options;\n  const engine = scene.getEngine();\n  engine.hideLoadingUI();\n\n  return new Promise((resolve, reject) => {\n    try {\n      GLTF2.GLTFLoader; // fucking loader 'magic'\n      SceneLoader.ShowLoadingScreen = false;\n\n      SceneLoader.LoadAssetContainer(\n        \"\",\n        path,\n        scene,\n        (assets) => {\n          resolve(assets);\n        },\n        (progress) => {\n          return onProgress(progress);\n        },\n        (scene, message, reason) => {\n          console.log({ path, scene, message, reason });\n          reject(reason);\n        }\n      );\n    } catch (reason) {\n      reject(reason);\n    }\n  });\n};\n"]}