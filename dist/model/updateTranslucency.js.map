{"version":3,"file":"updateTranslucency.js","sourceRoot":"","sources":["../../src/model/updateTranslucency.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,2CAA2C,CAAC;AAExE,OAAO,EAAE,SAAS,EAAE,MAAM,oBAAoB,CAAC;AAE/C,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,KAA8B,EAAE,EAAE;IACnE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,cAAc,GAAG,IAAI,EAAE,WAAW,GAAG,IAAI,EAAE,GAAG,KAAK,CAAC;IACzE,MAAM,QAAQ,GAAG,IAAI,EAAE,QAAQ,EAAE,iBAAiB,EAAE,IAAI,EAAE,CAAC;IAC3D,IACE,SAAS,CACP,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE;QAClB,MAAM,OAAO,GAAG,CAAC,EAAE,IAAI,CAAC;QACxB,OAAO,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACtC,CAAC,CAAC,CACH,EACD,CAAC;QACD,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC/B,IAAI,QAAQ,YAAY,WAAW,EAAE,CAAC;YACpC,oCAAoC;YACpC,yBAAyB;YACzB,6BAA6B;YAC7B,8CAA8C;YAC9C,oDAAoD;YACpD,kDAAkD;YAClD,kDAAkD;YAClD,gDAAgD;YAChD,+DAA+D;YAC/D,UAAU;YACV,UAAU;YACV,QAAQ;YACR,KAAK;YACL,iDAAiD;YACjD,oDAAoD;YACpD,kDAAkD;QACpD,CAAC;IACH,CAAC;IAED,IAAI,CAAC,cAAc,EAAE,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,kBAAkB,CAAC,EAAE,GAAG,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;AAC9E,CAAC,CAAC","sourcesContent":["import { PBRMaterial } from \"@babylonjs/core/Materials/PBR/pbrMaterial\";\nimport type { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\nimport { isDefined } from \"@mjt-engine/object\";\n\nexport const updateTranslucency = (props: UpdateTranslucencyProps) => {\n  const { mesh, value, textureMatcher = /.*/, meshMatcher = /.*/ } = props;\n  const textures = mesh?.material?.getActiveTextures() ?? [];\n  if (\n    isDefined(\n      textures.find((t) => {\n        const texName = t?.name;\n        return textureMatcher.test(texName);\n      })\n    )\n  ) {\n    const material = mesh.material;\n    if (material instanceof PBRMaterial) {\n      // material.albedoColor = c3(color);\n      // material.metallic = 0;\n      // material.roughness = 0.16;\n      // material.subSurface.maximumThickness = 0.1;\n      // material.subSurface.isTranslucencyEnabled = true;\n      // material.subSurface.isRefractionEnabled = true;\n      // material.subSurface.translucencyIntensity = 10;\n      // material.subSurface.tintColor = Color3.Red();\n      // material.subSurface.scatteringDiffusionProfile = new Color3(\n      //   0.75,\n      //   0.25,\n      //   0.2\n      // );\n      // material.subSurface.useThicknessAsDepth = true\n      // material.subSurface.translucencyIntensity = value\n      // material.subSurface.isScatteringEnabled = true;\n    }\n  }\n\n  mesh.getChildMeshes().map((mesh) => updateTranslucency({ ...props, mesh }));\n};\n\nexport type UpdateTranslucencyProps = {\n  mesh: AbstractMesh;\n  value: number;\n  textureMatcher: RegExp;\n  meshMatcher: RegExp;\n};\n"]}