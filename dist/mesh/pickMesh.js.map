{"version":3,"file":"pickMesh.js","sourceRoot":"","sources":["../../src/mesh/pickMesh.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,MAAM,EAAE,MAAM,mCAAmC,CAAC;AAI3D,MAAM,CAAC,MAAM,QAAQ,GAAG,CACtB,KAAY,EACZ,CAAS,EACT,CAAS,EACT,UAGK,EAAE,EACP,EAAE;IACF,MAAM,EACJ,SAAS,GAAG,CAAC,IAAkB,EAAE,EAAE,CAAC,IAAI,CAAC,UAAU,EACnD,MAAM,GAAG,KAAK,CAAC,YAAY,GAC5B,GAAG,OAAO,CAAC;IACZ,MAAM,GAAG,GAAG,KAAK,CAAC,gBAAgB,CAAC,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,QAAQ,EAAE,EAAE,MAAM,CAAC,CAAC;IACpE,MAAM,GAAG,GAAG,KAAK,CAAC,WAAW,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;IAC9C,OAAO,GAAG,EAAE,UAAU,CAAC;AACzB,CAAC,CAAC","sourcesContent":["import type { Camera } from \"@babylonjs/core/Cameras/camera\";\nimport { Matrix } from \"@babylonjs/core/Maths/math.vector\";\nimport type { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\nimport type { Scene } from \"@babylonjs/core/scene\";\n\nexport const pickMesh = (\n  scene: Scene,\n  x: number,\n  y: number,\n  options: Partial<{\n    camera: Camera;\n    predicate: (mesh: AbstractMesh) => boolean;\n  }> = {}\n) => {\n  const {\n    predicate = (mesh: AbstractMesh) => mesh.isPickable,\n    camera = scene.activeCamera,\n  } = options;\n  const ray = scene.createPickingRay(x, y, Matrix.Identity(), camera);\n  const hit = scene.pickWithRay(ray, predicate);\n  return hit?.pickedMesh;\n};\n"]}