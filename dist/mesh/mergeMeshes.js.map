{"version":3,"file":"mergeMeshes.js","sourceRoot":"","sources":["../../src/mesh/mergeMeshes.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,6BAA6B,CAAC;AAEnD,MAAM,CAAC,MAAM,WAAW,GAAG,CACzB,MAAc,EACd,UAMK,EAAE,EACP,EAAE;IACF,MAAM,EACJ,aAAa,GAAG,KAAK,EACrB,kBAAkB,GAAG,IAAI,EACzB,YAAY,GAAG,SAAS,EACxB,sBAAsB,GAAG,KAAK,EAC9B,mBAAmB,GAAG,KAAK,GAC5B,GAAG,OAAO,CAAC;IACZ,MAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CACjC,MAAgB,EAChB,aAAa,EACb,kBAAkB,EAClB,YAAY,EACZ,sBAAsB,EACtB,mBAAmB,CACpB,CAAC;IAEF,OAAO,UAAU,CAAC;AACpB,CAAC,CAAC","sourcesContent":["import { Mesh } from \"@babylonjs/core/Meshes/mesh\";\n\nexport const mergeMeshes = (\n  meshes: Mesh[],\n  options: Partial<{\n    disposeSource: boolean;\n    allow32BitsIndices: boolean;\n    meshSubclass: Mesh;\n    subdivideWithSubMeshes: boolean;\n    multiMultiMaterials: boolean;\n  }> = {}\n) => {\n  const {\n    disposeSource = false,\n    allow32BitsIndices = true,\n    meshSubclass = undefined,\n    subdivideWithSubMeshes = false,\n    multiMultiMaterials = false,\n  } = options;\n  const mergedMesh = Mesh.MergeMeshes(\n    meshes as Mesh[],\n    disposeSource,\n    allow32BitsIndices,\n    meshSubclass,\n    subdivideWithSubMeshes,\n    multiMultiMaterials\n  );\n\n  return mergedMesh;\n};\n"]}