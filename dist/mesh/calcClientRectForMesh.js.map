{"version":3,"file":"calcClientRectForMesh.js","sourceRoot":"","sources":["../../src/mesh/calcClientRectForMesh.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,mCAAmC,CAAC;AAE5D,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAElC,gHAAgH;AAChH,MAAM,CAAC,MAAM,qBAAqB,GAAG,CAAC,IAAkB,EAAE,EAAE;IAC1D,+BAA+B;IAC/B,MAAM,WAAW,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC,WAAW,CAAC,OAAO,CAAC;IAC/D,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;IAC9B,MAAM,MAAM,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC,kBAAkB,EAAE,CAAC;IACtD,IAAI,CAAC,MAAM,EAAE,CAAC;QACZ,MAAM,IAAI,KAAK,CAAC,qBAAqB,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;IAC3D,CAAC;IAED,4EAA4E;IAC5E,MAAM,WAAW,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;IAC1C,MAAM,eAAe,GAAG,KAAK,CAAC,kBAAkB,EAAE,CAAC;IACnD,MAAM,QAAQ,GAAG,KAAK,CAAC,YAAa,CAAC,QAAQ,CAAC;IAE9C,+GAA+G;IAC/G,MAAM,WAAW,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE;QACxC,MAAM,IAAI,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,EAAE,WAAW,EAAE,eAAe,EAAE,QAAQ,CAAC,CAAC;QACxE,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,MAAM,CAAC,WAAW,CAAC;QACrC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,MAAM,CAAC,YAAY,CAAC;QACtC,OAAO,IAAI,CAAC;IACd,CAAC,CAAC,CAAC;IAEH,mGAAmG;IACnG,kBAAkB;IAClB,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAa,CAAC;IACjE,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAa,CAAC;IAEjE,gCAAgC;IAChC,MAAM,IAAI,GAAG;QACX,KAAK,EAAE,IAAI,GAAG,IAAI;QAClB,MAAM,EAAE,IAAI,GAAG,IAAI;QACnB,IAAI,EAAE,IAAI;QACV,GAAG,EAAE,IAAI;QACT,KAAK,EAAE,IAAI;QACX,MAAM,EAAE,IAAI;KACb,CAAC;IAEF,OAAO,IAAI,CAAC;AACd,CAAC,CAAC","sourcesContent":["import { Vector3 } from \"@babylonjs/core/Maths/math.vector\";\nimport type { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\nimport { extent } from \"d3-array\";\n\n/** @see https://forum.babylonjs.com/t/get-mesh-bounding-box-position-and-size-in-2d-screen-coordinates/1058  */\nexport const calcClientRectForMesh = (mesh: AbstractMesh) => {\n  // get bounding box of the mesh\n  const meshVectors = mesh.getBoundingInfo().boundingBox.vectors;\n  const scene = mesh.getScene();\n  const canvas = scene.getEngine().getRenderingCanvas();\n  if (!canvas) {\n    throw new Error(\"No canvas for scene\", { cause: scene });\n  }\n\n  // get the matrix and viewport needed to project the vectors onto the screen\n  const worldMatrix = mesh.getWorldMatrix();\n  const transformMatrix = scene.getTransformMatrix();\n  const viewport = scene.activeCamera!.viewport;\n\n  // loop though all the vectors and project them against the current camera viewport to get a set of coordinates\n  const coordinates = meshVectors.map((v) => {\n    const proj = Vector3.Project(v, worldMatrix, transformMatrix, viewport);\n    proj.x = proj.x * canvas.clientWidth;\n    proj.y = proj.y * canvas.clientHeight;\n    return proj;\n  });\n\n  // get the min and max for all the coordinates so we can calculate the largest possible screen size\n  // using d3.extent\n  const [minX, maxX] = extent(coordinates, (c) => c.x) as number[];\n  const [minY, maxY] = extent(coordinates, (c) => c.y) as number[];\n\n  // return a ClientRect from this\n  const rect = {\n    width: maxX - minX,\n    height: maxY - minY,\n    left: minX,\n    top: minY,\n    right: maxX,\n    bottom: maxY,\n  };\n\n  return rect;\n};\n"]}