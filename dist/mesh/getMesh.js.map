{"version":3,"file":"getMesh.js","sourceRoot":"","sources":["../../src/mesh/getMesh.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,SAAS,EAAE,MAAM,oBAAoB,CAAC;AAE/C,MAAM,CAAC,MAAM,OAAO,GAAG,CACrB,KAAY,EACZ,IAAY,EACZ,QAA6B,EAC7B,YAAqB,KAAK,EACvB,EAAE;IACL,MAAM,SAAS,GAAG,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IAC5C,IAAI,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;QACvC,OAAO,SAAc,CAAC;IACxB,CAAC;IACD,IAAI,SAAS,CAAC,SAAS,CAAC,IAAI,SAAS,EAAE,CAAC;QACtC,OAAO,QAAQ,CAAC,SAAc,CAAM,CAAC;IACvC,CAAC;IACD,OAAO,QAAQ,EAAE,CAAC;AACpB,CAAC,CAAC","sourcesContent":["import type { InstancedMesh } from \"@babylonjs/core/Meshes/instancedMesh\";\nimport type { Mesh } from \"@babylonjs/core/Meshes/mesh\";\nimport type { Scene } from \"@babylonjs/core/scene\";\nimport { isDefined } from \"@mjt-engine/object\";\n\nexport const getMesh = <T extends Mesh | InstancedMesh>(\n  scene: Scene,\n  name: string,\n  producer: (instance?: T) => T,\n  updatable: boolean = false\n): T => {\n  const meshMaybe = scene.getMeshByName(name);\n  if (isDefined(meshMaybe) && !updatable) {\n    return meshMaybe as T;\n  }\n  if (isDefined(meshMaybe) && updatable) {\n    return producer(meshMaybe as T) as T;\n  }\n  return producer();\n};\n"]}