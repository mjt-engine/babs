{"version":3,"file":"updateMesh.js","sourceRoot":"","sources":["../../src/mesh/updateMesh.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,gBAAgB,EAAE,MAAM,4CAA4C,CAAC;AAE9E,OAAO,EAAE,IAAI,EAAE,MAAM,6BAA6B,CAAC;AAEnD,OAAO,EAAE,MAAM,EAAE,MAAM,mBAAmB,CAAC;AAE3C,OAAO,EAAE,GAAG,EAAE,SAAS,EAAE,MAAM,oBAAoB,CAAC;AACpD,OAAO,EAAE,EAAE,EAAE,MAAM,WAAW,CAAC;AAC/B,OAAO,EAAE,EAAE,EAAE,MAAM,WAAW,CAAC;AAC/B,OAAO,EAAE,WAAW,EAAE,MAAM,yBAAyB,CAAC;AAUtD,MAAM,CAAC,MAAM,UAAU,GAAG,CACxB,KAAY,EACZ,IAA0B,EAC1B,OAAoB,EACpB,EAAE;IACF,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,cAAc,EAAE,GAAG,OAAO,CAAC;IAE9D,IAAI,IAAI,YAAY,IAAI,IAAI,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC;QAChD,IAAI,CAAC,QAAQ,GAAG,WAAW,CAAC,KAAK,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;IAC3D,CAAC;IAED,IAAI,IAAI,YAAY,IAAI,IAAI,SAAS,CAAC,cAAc,CAAC,EAAE,CAAC;QACtD,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;IACvC,CAAC;IAED,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,EAAE;QAClB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;IACxB,CAAC,CAAC,CAAC;IAEH,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,EAAE;QACf,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC/B,IAAI,QAAQ,YAAY,gBAAgB,EAAE,CAAC;YACzC,QAAQ,CAAC,YAAY,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;YAC9B,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;YACrC,IAAI,KAAK,GAAG,CAAC,EAAE,CAAC;gBACd,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC;YACzB,CAAC;YACD,QAAQ,CAAC,aAAa,GAAG,EAAE,CAAC,OAAO,CAAC,CAAC;YACrC,QAAQ,CAAC,YAAY,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;YAC9B,QAAQ,CAAC,aAAa,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;QACjC,CAAC;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC","sourcesContent":["import { StandardMaterial } from \"@babylonjs/core/Materials/standardMaterial\";\nimport type { InstancedMesh } from \"@babylonjs/core/Meshes/instancedMesh\";\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\nimport type { Scene } from \"@babylonjs/core/scene\";\nimport { Colors } from \"@mjt-engine/color\";\nimport type { Point2, Point3 } from \"@mjt-engine/math\";\nimport { iff, isDefined } from \"@mjt-engine/object\";\nimport { c3 } from \"../bab/c3\";\nimport { v3 } from \"../bab/v3\";\nimport { getMaterial } from \"../material/getMaterial\";\n\nexport type MeshOptions = Partial<{\n  position: Point3 | Point2;\n  // texture: string;\n  color: string;\n  material: string;\n  receiveShadows: boolean;\n}>;\n\nexport const updateMesh = (\n  scene: Scene,\n  mesh: Mesh | InstancedMesh,\n  options: MeshOptions\n) => {\n  const { position, color, material, receiveShadows } = options;\n\n  if (mesh instanceof Mesh && isDefined(material)) {\n    mesh.material = getMaterial(scene, material, \"standard\");\n  }\n\n  if (mesh instanceof Mesh && isDefined(receiveShadows)) {\n    mesh.receiveShadows = receiveShadows;\n  }\n\n  iff(position, (p) => {\n    mesh.position = v3(p);\n  });\n\n  iff(color, (c) => {\n    const material = mesh.material;\n    if (material instanceof StandardMaterial) {\n      material.diffuseColor = c3(c);\n      const alpha = Colors.from(c).alpha();\n      if (alpha < 1) {\n        material.alpha = alpha;\n      }\n      material.specularColor = c3(\"black\");\n      material.ambientColor = c3(c);\n      material.emissiveColor = c3(c);\n    }\n  });\n};\n"]}