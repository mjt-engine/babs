{"version":3,"file":"getPolyhedron.js","sourceRoot":"","sources":["../../src/mesh/getPolyhedron.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,oCAAoC,CAAC;AAEjE,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AAEpC,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAE1C,MAAM,CAAC,MAAM,UAAU,GAAG;IACxB,WAAW,EAAE,CAAC;IACd,UAAU,EAAE,CAAC;IACb,YAAY,EAAE,CAAC;IACf,WAAW,EAAE,CAAC;IACd,mBAAmB,EAAE,CAAC;IACtB,eAAe,EAAE,CAAC;IAClB,eAAe,EAAE,CAAC;IAClB,cAAc,EAAE,CAAC;IACjB,aAAa,EAAE,CAAC;IAChB,iBAAiB,EAAE,CAAC;IACpB,mBAAmB,EAAE,EAAE;IACvB,oBAAoB,EAAE,EAAE;IACxB,wBAAwB,EAAE,EAAE;IAC5B,4BAA4B,EAAE,EAAE;IAChC,yBAAyB,EAAE,EAAE;CAC9B,CAAC;AAEF,MAAM,CAAC,MAAM,aAAa,GAAG,CAC3B,KAAY,EACZ,IAAY,EACZ,UAKO,EAAE,EACT,EAAE;IACF,OAAO,OAAO,CAAC,KAAK,EAAE,IAAI,EAAE,GAAG,EAAE;QAC/B,MAAM,EAAE,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,aAAa,EAAE,GAAG,OAAO,CAAC;QACnD,MAAM,IAAI,GAAG,WAAW,CAAC,gBAAgB,CACvC,IAAI,EACJ,EAAE,IAAI,EAAE,UAAU,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,EAChC,KAAK,CACN,CAAC;QACF,UAAU,CAAC,KAAK,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;QACjC,OAAO,IAAI,CAAC;IACd,CAAC,CAAC,CAAC;AACL,CAAC,CAAC","sourcesContent":["import { MeshBuilder } from \"@babylonjs/core/Meshes/meshBuilder\";\nimport type { Scene } from \"@babylonjs/core/scene\";\nimport { getMesh } from \"./getMesh\";\nimport type { MeshOptions } from \"./updateMesh\";\nimport { updateMesh } from \"./updateMesh\";\n\nexport const BabPolyMap = {\n  tetrahedron: 0,\n  octahedron: 1,\n  dodecahedron: 2,\n  icosahedron: 3,\n  rhombicuboctahadron: 4,\n  triangularPrism: 5,\n  pentagonalPrism: 6,\n  hexagonalPrism: 7,\n  squarePyramid: 8,\n  pentagonalPyramid: 9,\n  triangularDipyramid: 10,\n  pentagonalDipryramid: 11,\n  elongatedSquareDipyramid: 12,\n  elongatedPentagonalDipyramid: 13,\n  elongatedPentagonalCupola: 14,\n};\n\nexport const getPolyhedron = (\n  scene: Scene,\n  name: string,\n  options: MeshOptions &\n    Partial<{\n      size: number;\n      type: keyof typeof BabPolyMap;\n      material: string;\n    }> = {}\n) => {\n  return getMesh(scene, name, () => {\n    const { size = 1, type = \"tetrahedron\" } = options;\n    const mesh = MeshBuilder.CreatePolyhedron(\n      name,\n      { type: BabPolyMap[type], size },\n      scene\n    );\n    updateMesh(scene, mesh, options);\n    return mesh;\n  });\n};\n"]}