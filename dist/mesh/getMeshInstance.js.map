{"version":3,"file":"getMeshInstance.js","sourceRoot":"","sources":["../../src/mesh/getMeshInstance.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,OAAO,EAAE,MAAM,oBAAoB,CAAC;AAC7C,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AAEpC,MAAM,CAAC,MAAM,eAAe,GAAG,CAC7B,KAAY,EACZ,IAAY,EACZ,QAAgB,EAChB,QAAiB,EACjB,EAAE;IACF,OAAO,OAAO,CAAC,KAAK,EAAE,IAAI,EAAE,GAAG,EAAE;QAC/B,MAAM,QAAQ,GAAG,OAAO,CAAC,KAAK,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACpD,OAAO,CAAC,WAAW,CAAC,QAAQ,EAAE,GAAG,EAAE;YACjC,OAAO,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC,CAAC;YACjD,OAAO,oDAAoD,CAAC;QAC9D,CAAC,CAAC,CAAC;QACH,OAAO,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;IACvC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC","sourcesContent":["import type { Mesh } from \"@babylonjs/core/Meshes/mesh\";\nimport type { Scene } from \"@babylonjs/core/scene\";\nimport { Asserts } from \"@mjt-engine/assert\";\nimport { getMesh } from \"./getMesh\";\n\nexport const getMeshInstance = <T extends Mesh>(\n  scene: Scene,\n  name: string,\n  rootName: string,\n  producer: () => T\n) => {\n  return getMesh(scene, name, () => {\n    const rootMesh = getMesh(scene, rootName, producer);\n    Asserts.assertValue(rootMesh, () => {\n      console.log({ scene, name, rootName, producer });\n      return \"Unable to create mesh instance. Missing root mesh.\";\n    });\n    return rootMesh.createInstance(name);\n  });\n};\n"]}