{"version":3,"file":"calcTopOfMeshWorldPosition.js","sourceRoot":"","sources":["../../src/mesh/calcTopOfMeshWorldPosition.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAE1C,MAAM,CAAC,MAAM,0BAA0B,GAAG,CAAC,IAAkB,EAAE,EAAE;IAC/D,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;IAC9B,IAAI,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC;IAC7B,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC,CAAC;IAErD,+DAA+D;IAC/D,MAAM,MAAM,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC,cAAc,CAAC,MAAM,CAAC;IAC5D,kDAAkD;IAClD,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,MAAM,CAAW,CAAC;AACtC,CAAC,CAAC","sourcesContent":["import type { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\nimport type { Point3 } from \"@mjt-engine/math\";\nimport { toVec3 } from \"@mjt-engine/math\";\n\nexport const calcTopOfMeshWorldPosition = (mesh: AbstractMesh) => {\n  mesh.computeWorldMatrix(true);\n  mesh.refreshBoundingInfo({});\n  const [x, y, z] = toVec3(mesh.getAbsolutePosition());\n\n  // const radius = mesh.getBoundingInfo().boundingSphere.radius;\n  const radius = mesh.getBoundingInfo().boundingSphere.radius;\n  // const top = mesh.getBoundingInfo().boundingBox.\n  return [x, y, z - radius] as Point3;\n};\n"]}