{"version":3,"file":"getBoxInstance.js","sourceRoot":"","sources":["../../src/mesh/getBoxInstance.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,WAAW,EAAE,MAAM,oCAAoC,CAAC;AAEjE,OAAO,EAAE,WAAW,EAAE,MAAM,oBAAoB,CAAC;AACjD,OAAO,EAAE,WAAW,EAAE,MAAM,yBAAyB,CAAC;AAEtD,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAE1C,MAAM,CAAC,MAAM,cAAc,GAAG,CAC5B,KAAY,EACZ,IAAY,EACZ,OAMI,EACJ,EAAE;IACF,MAAM,EACJ,KAAK,GAAG,CAAC,EACT,MAAM,GAAG,CAAC,EACV,KAAK,GAAG,CAAC,EACT,QAAQ,EACR,cAAc,GAAG,KAAK,GACvB,GAAG,OAAO,CAAC;IACZ,sCAAsC;IACtC,MAAM,QAAQ,GAAG,qBAAqB,IAAI,CAAC,SAAS,CAAC;QACnD,KAAK;QACL,MAAM;QACN,KAAK;QACL,QAAQ;QACR,cAAc;KACf,CAAC,EAAE,CAAC;IACL,IAAI,QAAQ,GAAG,KAAK,CAAC,aAAa,CAAC,QAAQ,CAAS,CAAC;IACrD,IAAI,WAAW,CAAC,QAAQ,CAAC,EAAE,CAAC;QAC1B,QAAQ,GAAG,WAAW,CAAC,SAAS,CAAC,QAAQ,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,EAAE,KAAK,CAAC,CAAC;QAC5E,QAAQ,CAAC,cAAc,GAAG,cAAc,CAAC;QACzC,QAAQ,CAAC,SAAS,GAAG,KAAK,CAAC;QAC3B,IAAI,CAAC,QAAQ,EAAE,CAAC;YACd,MAAM,IAAI,KAAK,CAAC,aAAa,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;QACrD,CAAC;QACD,QAAQ,CAAC,QAAQ,GAAG,WAAW,CAAC,KAAK,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;IAC/D,CAAC;IACD,MAAM,IAAI,GAAG,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;IAC3C,UAAU,CAAC,KAAK,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;IACjC,OAAO,IAAI,CAAC;IACZ,MAAM;AACR,CAAC,CAAC","sourcesContent":["import type { Mesh } from \"@babylonjs/core/Meshes/mesh\";\nimport { MeshBuilder } from \"@babylonjs/core/Meshes/meshBuilder\";\nimport type { Scene } from \"@babylonjs/core/scene\";\nimport { isUndefined } from \"@mjt-engine/object\";\nimport { getMaterial } from \"../material/getMaterial\";\nimport type { MeshOptions } from \"./updateMesh\";\nimport { updateMesh } from \"./updateMesh\";\n\nexport const getBoxInstance = (\n  scene: Scene,\n  name: string,\n  options: MeshOptions &\n    Partial<{\n      width: number;\n      height: number;\n      depth: number;\n      receiveShadows: boolean;\n    }>\n) => {\n  const {\n    width = 1,\n    height = 1,\n    depth = 1,\n    material,\n    receiveShadows = false,\n  } = options;\n  // return getMesh(scene, name, () => {\n  const rootName = `box-instance-root-${JSON.stringify([\n    width,\n    height,\n    depth,\n    material,\n    receiveShadows,\n  ])}`;\n  let rootMesh = scene.getMeshByName(rootName) as Mesh;\n  if (isUndefined(rootMesh)) {\n    rootMesh = MeshBuilder.CreateBox(rootName, { width, height, depth }, scene);\n    rootMesh.receiveShadows = receiveShadows;\n    rootMesh.isVisible = false;\n    if (!material) {\n      throw new Error(\"No material\", { cause: options });\n    }\n    rootMesh.material = getMaterial(scene, material, \"standard\");\n  }\n  const mesh = rootMesh.createInstance(name);\n  updateMesh(scene, mesh, options);\n  return mesh;\n  // });\n};\n"]}