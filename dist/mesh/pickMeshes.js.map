{"version":3,"file":"pickMeshes.js","sourceRoot":"","sources":["../../src/mesh/pickMeshes.ts"],"names":[],"mappings":"AAIA,MAAM,CAAC,MAAM,UAAU,GAAG,CACxB,KAAY,EACZ,CAAS,EACT,CAAS,EACT,UAGK,EAAE,EACP,EAAE;IACF,MAAM,EACJ,SAAS,GAAG,CAAC,IAAkB,EAAE,EAAE,CAAC,IAAI,CAAC,UAAU,EACnD,MAAM,GAAG,KAAK,CAAC,YAAY,GAC5B,GAAG,OAAO,CAAC;IACZ,IAAI,CAAC,MAAM,EAAE,CAAC;QACZ,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACrC,CAAC;IACD,OAAO,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;AAClD,CAAC,CAAC","sourcesContent":["import type { Camera } from \"@babylonjs/core/Cameras/camera\";\nimport type { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\nimport type { Scene } from \"@babylonjs/core/scene\";\n\nexport const pickMeshes = (\n  scene: Scene,\n  x: number,\n  y: number,\n  options: Partial<{\n    camera: Camera;\n    predicate: (mesh: AbstractMesh) => boolean;\n  }> = {}\n) => {\n  const {\n    predicate = (mesh: AbstractMesh) => mesh.isPickable,\n    camera = scene.activeCamera,\n  } = options;\n  if (!camera) {\n    throw new Error(\"Camera required\");\n  }\n  return scene.multiPick(x, y, predicate, camera);\n};\n"]}