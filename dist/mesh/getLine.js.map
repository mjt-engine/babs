{"version":3,"file":"getLine.js","sourceRoot":"","sources":["../../src/mesh/getLine.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,WAAW,EAAE,MAAM,oCAAoC,CAAC;AAGjE,OAAO,EAAE,EAAE,EAAE,MAAM,WAAW,CAAC;AAC/B,OAAO,EAAE,EAAE,EAAE,MAAM,WAAW,CAAC;AAC/B,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AAEpC,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAE1C,MAAM,CAAC,MAAM,OAAO,GAAG,CACrB,KAAY,EACZ,IAAY,EACZ,OAMI,EACJ,EAAE;IACF,MAAM,EAAE,SAAS,GAAG,KAAK,EAAE,GAAG,OAAO,CAAC;IAEtC,OAAO,OAAO,CACZ,KAAK,EACL,IAAI,EACJ,CAAC,QAA+B,EAAE,EAAE;QAClC,OAAO,aAAa,CAAC,KAAK,EAAE,IAAI,EAAE;YAChC,GAAG,OAAO;YACV,QAAQ;YACR,wBAAwB;SACzB,CAAC,CAAC;IACL,CAAC,EACD,SAAS,CACV,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,aAAa,GAAG,CACpB,KAAY,EACZ,IAAY,EACZ,OAOI,EACJ,EAAE;IACF,MAAM,EACJ,MAAM,GAAG,EAAE,EACX,MAAM,GAAG,EAAE,EACX,KAAK,GAAG,OAAO,EACf,SAAS,GAAG,KAAK,EACjB,cAAc,EACd,QAAQ,GACT,GAAG,OAAO,CAAC;IACZ,MAAM,WAAW,GAAG,MAAM;SACvB,GAAG,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;SACzC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IACrB,MAAM,aAAa,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/C,MAAM,IAAI,GAAG,WAAW,CAAC,WAAW,CAAC,IAAI,EAAE;QACzC,MAAM,EAAE,aAAa;QACrB,MAAM,EAAE,WAAW;QACnB,SAAS;QACT,cAAc;QACd,QAAQ;KACT,CAAC,CAAC;IACH,UAAU,CAAC,KAAK,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;IACjC,OAAO,IAAI,CAAC;AACd,CAAC,CAAC","sourcesContent":["import type { LinesMesh } from \"@babylonjs/core/Meshes/linesMesh\";\nimport { MeshBuilder } from \"@babylonjs/core/Meshes/meshBuilder\";\nimport type { Scene } from \"@babylonjs/core/scene\";\nimport type { Point3 } from \"@mjt-engine/math\";\nimport { c4 } from \"../bab/c4\";\nimport { v3 } from \"../bab/v3\";\nimport { getMesh } from \"./getMesh\";\nimport type { MeshOptions } from \"./updateMesh\";\nimport { updateMesh } from \"./updateMesh\";\n\nexport const getLine = (\n  scene: Scene,\n  name: string,\n  options: MeshOptions &\n    Partial<{\n      points: Point3[];\n      colors: string[];\n      updatable: boolean;\n      useVertexAlpha: boolean;\n    }>\n) => {\n  const { updatable = false } = options;\n\n  return getMesh(\n    scene,\n    name,\n    (instance: LinesMesh | undefined) => {\n      return buildLineMesh(scene, name, {\n        ...options,\n        instance,\n        // updatable: undefined,\n      });\n    },\n    updatable\n  );\n};\n\nconst buildLineMesh = (\n  scene: Scene,\n  name: string,\n  options: MeshOptions &\n    Partial<{\n      points: Point3[];\n      colors: string[];\n      updatable: boolean;\n      useVertexAlpha: boolean;\n      instance: LinesMesh;\n    }>\n) => {\n  const {\n    colors = [],\n    points = [],\n    color = \"white\",\n    updatable = false,\n    useVertexAlpha,\n    instance,\n  } = options;\n  const pointColors = points\n    .map((_, index) => colors[index] ?? color)\n    .map((c) => c4(c));\n  const fleshedPoints = points.map((p) => v3(p));\n  const mesh = MeshBuilder.CreateLines(name, {\n    points: fleshedPoints,\n    colors: pointColors,\n    updatable,\n    useVertexAlpha,\n    instance,\n  });\n  updateMesh(scene, mesh, options);\n  return mesh;\n};\n"]}