{"version":3,"file":"describeMesh.js","sourceRoot":"","sources":["../../src/mesh/describeMesh.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,OAAO,EAAE,MAAM,4CAA4C,CAAC;AAErE,OAAO,EAAE,SAAS,EAAE,MAAM,oBAAoB,CAAC;AAE/C,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,IAAkB,EAAE,MAAM,GAAG,IAAI,EAAE,KAAK,GAAG,CAAC,EAAE,EAAE;IAC3E,MAAM,OAAO,GAAG,EAAE,CAAC,QAAQ,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;IACvC,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;QAC3B,OAAO,CAAC,GAAG,CAAC,GAAG,OAAO,UAAU,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;QAC9C,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAuB,CAAC;QAC9C,IAAI,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC;YACxB,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CACpD,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACvB,CAAC;YACF,OAAO,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;gBACpB,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,KAAK,CAAC;gBAC3B,IAAI,KAAK,YAAY,OAAO,IAAI,GAAG,KAAK,yBAAyB,EAAE,CAAC;oBAClE,OAAO,CAAC,GAAG,CAAC,GAAG,OAAO,SAAS,KAAK,CAAC,IAAI,MAAM,GAAG,GAAG,CAAC,CAAC;gBACzD,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,IAAI,CAAC,cAAc,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,YAAY,CAAC,CAAC,EAAE,MAAM,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;AACvE,CAAC,CAAC","sourcesContent":["import type { PBRMaterial } from \"@babylonjs/core/Materials/PBR/pbrMaterial\";\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture\";\nimport type { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\nimport { isDefined } from \"@mjt-engine/object\";\n\nexport const describeMesh = (mesh: AbstractMesh, search = /.*/, depth = 0) => {\n  const padding = \"\".padStart(depth * 2);\n  if (search.test(mesh.name)) {\n    console.log(`${padding}mesh: '${mesh.name}'`);\n    const material = mesh.material as PBRMaterial;\n    if (isDefined(material)) {\n      const entries = Object.entries(material).filter((e) =>\n        /.Texture$/.test(e[0])\n      );\n      entries.map((entry) => {\n        const [key, value] = entry;\n        if (value instanceof Texture && key !== \"_environmentBRDFTexture\") {\n          console.log(`${padding}tex: '${value.name}' (${key})`);\n        }\n      });\n    }\n  }\n\n  mesh.getChildMeshes().map((m) => describeMesh(m, search, depth + 1));\n};\n"]}