{"version":3,"file":"layerToPlane.js","sourceRoot":"","sources":["../../src/texture/layerToPlane.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,gBAAgB,EAAE,MAAM,4CAA4C,CAAC;AAC9E,OAAO,EAAE,WAAW,EAAE,MAAM,oCAAoC,CAAC;AAEjE,OAAO,EAAE,SAAS,EAAE,MAAM,oBAAoB,CAAC;AAC/C,OAAO,EAAE,OAAO,EAAE,MAAM,oBAAoB,CAAC;AAC7C,OAAO,EAAE,EAAE,EAAE,MAAM,WAAW,CAAC;AAG/B,OAAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAElD,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,GAAqC,EAAE,EAAE;IAClE,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE,CAAC;QAC5B,OAAO,IAAI,CAAC;IACd,CAAC;IACD,OAAO,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;AAC/D,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,GAAoB,EAAE,EAAE;IACnD,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE,CAAC;QAC5B,OAAO,GAAG,CAAC;IACb,CAAC;IACD,IAAI,IAAI,IAAI,GAAG,EAAE,CAAC;QAChB,OAAO,GAAG,CAAC,EAAE,CAAC;IAChB,CAAC;IACD,OAAO,SAAS,CAAC;AACnB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,YAAY,GAAG,KAAK,EAAE,KAAmB,EAAE,KAAY,EAAE,EAAE;IACtE,MAAM,EAAE,GAAG,OAAO,CAAC,UAAU,EAAE,CAAC;IAChC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,KAAK,CAAC;IACrC,MAAM,KAAK,GAAG,WAAW,CAAC,WAAW,CACnC,SAAS,EAAE,EAAE,EACb;QACE,KAAK,EAAE,IAAI;QACX,MAAM,EAAE,IAAI;KACb,EACD,KAAK,CACN,CAAC;IACF,MAAM,QAAQ,GAAG,IAAI,gBAAgB,CAAC,YAAY,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;IAC/D,IAAI,SAAS,CAAC,KAAK,CAAC,EAAE,CAAC;QACrB,MAAM,OAAO,GAAG,MAAM,cAAc,CAAC,KAAK,EAAE,SAAS,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;QAClE,KAAK,CAAC,QAAQ,GAAG,OAAO,CAAC;QACzB,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;QACpB,KAAK,CAAC,SAAS,GAAG,QAAQ,CAAC;QAE3B,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC;QACxB,QAAQ,CAAC,cAAc,GAAG,OAAO,CAAC;QAClC,QAAQ,CAAC,eAAe,GAAG,OAAO,CAAC;IACrC,CAAC;IAED,IAAI,SAAS,CAAC,KAAK,CAAC,EAAE,CAAC;QACrB,QAAQ,CAAC,aAAa,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;IAED,KAAK,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC1B,OAAO,KAAK,CAAC;AACf,CAAC,CAAC","sourcesContent":["import { StandardMaterial } from \"@babylonjs/core/Materials/standardMaterial\";\nimport { MeshBuilder } from \"@babylonjs/core/Meshes/meshBuilder\";\nimport type { Scene } from \"@babylonjs/core/scene\";\nimport { isDefined } from \"@mjt-engine/object\";\nimport { Randoms } from \"@mjt-engine/random\";\nimport { c3 } from \"../bab/c3\";\nimport type { TextureImageSrc } from \"./TextureImageSrc\";\nimport type { TextureLayer } from \"./TextureLayer\";\nimport { imageToTexture } from \"./imageToTexture\";\n\nexport const hasValidId = (obj: { id: string | number } | string) => {\n  if (typeof obj === \"string\") {\n    return true;\n  }\n  return isDefined(obj.id) && String(obj.id).startsWith(\"id-\");\n};\n\nexport const idOfImageSrc = (src: TextureImageSrc) => {\n  if (typeof src === \"string\") {\n    return src;\n  }\n  if (\"id\" in src) {\n    return src.id;\n  }\n  return undefined;\n};\n\nexport const layerToPlane = async (layer: TextureLayer, scene: Scene) => {\n  const id = Randoms.randomUuid();\n  const { size, image, color } = layer;\n  const plane = MeshBuilder.CreatePlane(\n    `plane-${id}`,\n    {\n      width: size,\n      height: size,\n    },\n    scene\n  );\n  const material = new StandardMaterial(`material-${id}`, scene);\n  if (isDefined(image)) {\n    const texture = await imageToTexture(scene, `layer-${id}`, image);\n    layer._texture = texture;\n    layer._mesh = plane;\n    layer._material = material;\n\n    texture.hasAlpha = true;\n    material.opacityTexture = texture;\n    material.emissiveTexture = texture;\n  }\n\n  if (isDefined(color)) {\n    material.emissiveColor = c3(color);\n  }\n\n  plane.material = material;\n  return plane;\n};\n"]}