{"version":3,"file":"imageToTexture.js","sourceRoot":"","sources":["../../src/texture/imageToTexture.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,mDAAmD,CAAC;AACnF,OAAO,EAAE,OAAO,EAAE,MAAM,4CAA4C,CAAC;AAErE,OAAO,EAAE,aAAa,EAAE,MAAM,uBAAuB,CAAC;AAEtD,MAAM,CAAC,MAAM,cAAc,GAAG,KAAK,EACjC,KAAY,EACZ,IAAY,EACZ,KAAsE,EACpD,EAAE;IACpB,IAAI,KAAK,YAAY,iBAAiB,EAAE,CAAC;QACvC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,IAAI,CAAC;gBACH,MAAM,OAAO,GAAG,IAAI,cAAc,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;gBACvD,OAAO,CAAC,MAAM,EAAE,CAAC;gBACjB,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC;gBACxB,OAAO,CAAC,OAAO,CAAC,CAAC;YACnB,CAAC;YAAC,OAAO,MAAM,EAAE,CAAC;gBAChB,MAAM,CAAC,MAAM,CAAC,CAAC;YACjB,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,MAAM,GAAG,GAAG,MAAM,aAAa,CAAC,KAAK,CAAC,CAAC;IACvC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACrC,IAAI,CAAC;YACH,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;YACrD,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC;YACxB,OAAO,CAAC,gBAAgB,CAAC,OAAO,CAAC,GAAG,EAAE;gBACpC,OAAO,CAAC,OAAO,CAAC,CAAC;YACnB,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,MAAM,EAAE,CAAC;YAChB,MAAM,CAAC,MAAM,CAAC,CAAC;QACjB,CAAC;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC","sourcesContent":["import { DynamicTexture } from \"@babylonjs/core/Materials/Textures/dynamicTexture\";\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture\";\nimport type { Scene } from \"@babylonjs/core/scene\";\nimport { imageSrcToUrl } from \"../util/imageSrcToUrl\";\n\nexport const imageToTexture = async (\n  scene: Scene,\n  name: string,\n  image: string | HTMLImageElement | HTMLCanvasElement | OffscreenCanvas\n): Promise<Texture> => {\n  if (image instanceof HTMLCanvasElement) {\n    return new Promise((resolve, reject) => {\n      try {\n        const texture = new DynamicTexture(name, image, scene);\n        texture.update();\n        texture.hasAlpha = true;\n        resolve(texture);\n      } catch (reason) {\n        reject(reason);\n      }\n    });\n  }\n\n  const url = await imageSrcToUrl(image);\n  return new Promise((resolve, reject) => {\n    try {\n      const texture = new Texture(url, scene, false, true);\n      texture.hasAlpha = true;\n      texture.onLoadObservable.addOnce(() => {\n        resolve(texture);\n      });\n    } catch (reason) {\n      reject(reason);\n    }\n  });\n};\n"]}